package tasks

import (
	"sort"
	"sync"
)

/*
	ProcessData

# TASK 2

üß† –ó–∞–¥–∞—á–∞: –§–∞–Ω-–∞—É—Ç –∏ —Å–±–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é ProcessData, –∫–æ—Ç–æ—Ä–∞—è:

–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Å–ª–∞–π—Å []int

# –°–æ–∑–¥–∞—ë—Ç 3 –≥–æ—Ä—É—Ç–∏–Ω—ã, –∫–∞–∂–¥–∞—è –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —á–∏—Ç–∞–µ—Ç —á–∏—Å–ª–∞ –∏–∑ –≤—Ö–æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏ –≤–æ–∑–≤–æ–¥–∏—Ç –∏—Ö –≤ –∫–≤–∞–¥—Ä–∞—Ç

# –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –≤ –≤—ã—Ö–æ–¥–Ω–æ–π –∫–∞–Ω–∞–ª

# –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–∞–π—Å –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ —á–∏—Å–µ–ª

–£—Ç–æ—á–Ω–µ–Ω–∏—è:

–ò—Å–ø–æ–ª—å–∑—É–π fan-out (–¥–µ–ª–∏–º —Ä–∞–±–æ—Ç—É –º–µ–∂–¥—É –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≥–æ—Ä—É—Ç–∏–Ω–∞–º–∏)

# –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–Ω–∞–ª—ã –∏ WaitGroup

–ù–µ –∑–∞–±—É–¥—å –∑–∞–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —É—Ç–µ—á–µ–∫
*/
func ProcessData(workers int, val []int) []int {
	chOut := make(chan int, len(val))

	chIn := make(chan int, len(val))
	var result []int

	wg := sync.WaitGroup{}
	wg.Add(workers)
	for _, v := range val {
		chIn <- v
	}
	close(chIn)

	for i := 0; i < workers; i++ {
		go func() {
			defer wg.Done()
			for {
				res, ok := <-chIn
				if !ok {
					return
				}
				res *= res
				chOut <- res
			}
		}()
	}
	wg.Wait()
	close(chOut)

	//for {
	//	if res, ok := <-chOut; ok {
	//		result = append(result, res)
	//	} else {
	//		break
	//	}
	//}
	for res := range chOut {
		result = append(result, res)
	}
	//return SortingSlice(result)
	sort.Ints(result)
	return result
}

func SortingSlice(result []int) []int {
	for i := 0; i < len(result); i++ {
		for j := i + 1; j < len(result); j++ {
			if result[i] > result[j] {
				result[i], result[j] = result[j], result[i]
			}
		}
	}
	return result
}
